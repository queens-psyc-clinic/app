# DEPLOYMENT
#
# This compose file deploys the entire app with it's proxy -- and maintains a
# volume of the DB data incase the container must be restarted so that no data
# is lost.
#

version: '3.1'

services:

  db:
    build: ./db
    restart: always
    networks:
      - mynetwork
    volumes: 
      - ./db/data:/var/lib/mysql
  
  app:
    build: 
      context: ./app
      dockerfile: Dockerfile.deploy
    depends_on: 
      - db
    restart: always
    networks:
      - mynetwork
    environment:
      - PYTHONUNBUFFERED=1
    volumes:
      - ./app:/app

  client:
    build: ./client
    depends_on: 
      - app
    restart: always
    networks:
      - mynetwork

  proxy:
    build: ./proxy
    depends_on: 
      - client
    restart: always
    networks:
      - mynetwork
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./certbot/www/:/var/www/certbot/:ro
      - ./certbot/conf/:/etc/nginx/ssl/:ro
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"

# NOTE: use the following command to generate initial ssl certificates (MUST COMMENT-OUT 443 SERVER IN proxy/nginx.conf FOR THIS TO WORK)
# sudo docker-compose -f docker-compose.deploy.yml run --rm  certbot certonly --webroot --webroot-path /var/www/certbot/ -d queens-psyc.caslab.queensu.ca
  certbot:
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    image: certbot/certbot:latest
    volumes:
      - ./certbot/www/:/var/www/certbot/:rw
      - ./certbot/conf/:/etc/letsencrypt/:rw

networks:
  mynetwork:
